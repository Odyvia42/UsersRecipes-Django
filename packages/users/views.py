from django.db.models import F
from django.shortcuts import render
from recipeblog.utils import get_all_users, get_paginated


def sort_user_list_by_reg_date_asc(request):
    """
    Функция-представление для отображения списка всех зарегистрированных пользователей
    с сортировкой по дате регистрации (по возрастанию).
    Функция принимает один параметр: запрос.
    Функция получает из базы данных набор всех зарегистрированных пользователей, сортирует его
    по дате регистрации (по возрастанию) и добавляет к набору пользователей пагинацию.
    Функция возвращает веб-страницу с шаблоном user-list-sort-by-reg-date-desc.html
    и контекстом,содержащим два набора пользователей:
    - отсортированный набор пользователей без пагинации (users), который нужен для отображения
    общего количества пользователей;
    - отсортированный набор пользователей с пагинацией (paged_users), который отображается на веб-странице;
    """
    users = get_all_users().order_by(F('registration_date').asc())
    paged_users = get_paginated(request, users)
    return render(request, 'user-list/user-list-sort-by-reg-date-asc.html',
                  {'users': users,
                   'paged_users': paged_users,
                   })


def sort_user_list_by_reg_date_desc(request):
    """
    Функция-представление для отображения списка всех зарегистрированных пользователей
    с сортировкой по дате регистрации (по убыванию).
    Функция принимает один параметр: запрос.
    Функция получает из базы данных набор всех зарегистрированных пользователей, сортирует его
    по дате регистрации (по убыванию) и добавляет к набору пользователей пагинацию.
    Функция возвращает веб-страницу с шаблоном user-list-sort-by-reg-date-desc.html
    и контекстом,содержащим два набора пользователей:
    - отсортированный набор пользователей без пагинации (users), который нужен для отображения
    общего количества пользователей;
    - отсортированный набор пользователей с пагинацией (paged_users), который отображается на веб-странице;
    """
    users = get_all_users().order_by(F('registration_date').desc())
    paged_users = get_paginated(request, users)
    return render(request, 'user-list/user-list-sort-by-reg-date-desc.html',
                  {'users': users,
                   'paged_users': paged_users,
                   })


def sort_user_list_by_username_asc(request):
    """
    Функция-представление для отображения списка всех зарегистрированных пользователей
    с сортировкой по алфавиту (в прямом порядке).
    Функция принимает один параметр: запрос.
    Функция получает из базы данных набор всех зарегистрированных пользователей, сортирует его
    по алфавиту (в прямом порядке) и добавляет к набору пользователей пагинацию.
    Функция возвращает веб-страницу с шаблоном user-list-sort-by-username-asc.html
    и контекстом,содержащим два набора пользователей:
    - отсортированный набор пользователей без пагинации (users), который нужен для отображения
    общего количества пользователей;
    - отсортированный набор пользователей с пагинацией (paged_users), который отображается на веб-странице;
    """
    users = get_all_users().order_by(F('username').asc())
    paged_users = get_paginated(request, users)
    return render(request, 'user-list/user-list-sort-by-username-asc.html',
                  {'users': users,
                   'paged_users': paged_users,
                   })


def sort_user_list_by_username_desc(request):
    """
    Функция-представление для отображения списка всех зарегистрированных пользователей
    с сортировкой по алфавиту (в обратном порядке).
    Функция принимает один параметр: запрос.
    Функция получает из базы данных набор всех зарегистрированных пользователей, сортирует его
    по алфавиту (в обратном порядке) и добавляет к набору пользователей пагинацию.
    Функция возвращает веб-страницу с шаблоном user-list-sort-by-username-desc.html
    и контекстом,содержащим два набора пользователей:
    - отсортированный набор пользователей без пагинации (users), который нужен для отображения
    общего количества пользователей;
    - отсортированный набор пользователей с пагинацией (paged_users), который отображается на веб-странице;
    """
    users = get_all_users().order_by(F('username').desc())
    paged_users = get_paginated(request, users)
    return render(request, 'user-list/user-list-sort-by-username-desc.html',
                  {'users': users,
                   'paged_users': paged_users,
                   })


def sort_user_list_by_recipes_amount_asc(request):
    """
    Функция-представление для отображения списка всех зарегистрированных пользователей
    с сортировкой по количеству рецептов (по возрастанию).
    Функция принимает один параметр: запрос.
    Функция получает из базы данных набор всех зарегистрированных пользователей, сортирует его
    по количеству рецептов (по возрастанию) и добавляет к набору пользователей пагинацию.
    Функция возвращает веб-страницу с шаблоном user-list-sort-by-recipes-amount-asc.html
    и контекстом,содержащим два набора пользователей:
    - отсортированный набор пользователей без пагинации (users), который нужен для отображения
    общего количества пользователей;
    - отсортированный набор пользователей с пагинацией (paged_users), который отображается на веб-странице;
    """
    users = get_all_users().order_by(F('num_recipes').asc())
    paged_users = get_paginated(request, users)
    return render(request, 'user-list/user-list-sort-by-recipes-amount-asc.html',
                  {'users': users,
                   'paged_users': paged_users,
                   })


def sort_user_list_by_recipes_amount_desc(request):
    """
    Функция-представление для отображения списка всех зарегистрированных пользователей
    с сортировкой по количеству рецептов (по убыванию).
    Функция принимает один параметр: запрос.
    Функция получает из базы данных набор всех зарегистрированных пользователей, сортирует его
    по количеству рецептов (по убыванию) и добавляет к набору пользователей пагинацию.
    Функция возвращает веб-страницу с шаблоном user-list-sort-by-recipes-amount-desc.html
    и контекстом,содержащим два набора пользователей:
    - отсортированный набор пользователей без пагинации (users), который нужен для отображения
    общего количества пользователей;
    - отсортированный набор пользователей с пагинацией (paged_users), который отображается на веб-странице;
    """
    users = get_all_users().order_by(F('num_recipes').desc())
    paged_users = get_paginated(request, users)
    return render(request, 'user-list/user-list-sort-by-recipes-amount-desc.html',
                  {'users': users,
                   'paged_users': paged_users,
                   })


def sort_user_list_by_rating_asc(request):
    """
    Функция-представление для отображения списка всех зарегистрированных пользователей
    с сортировкой по рейтингу, т.е. по суммарному количеству лайков на всех рецептах пользователя (по возрастанию).
    Функция принимает один параметр: запрос.
    Функция получает из базы данных набор всех зарегистрированных пользователей, сортирует его
    по рейтингу (по возрастанию) и добавляет к набору пользователей пагинацию.
    Функция возвращает веб-страницу с шаблоном user-list-sort-by-rating-asc.html
    и контекстом,содержащим два набора пользователей:
    - отсортированный набор пользователей без пагинации (users), который нужен для отображения
    общего количества пользователей;
    - отсортированный набор пользователей с пагинацией (paged_users), который отображается на веб-странице;
    """
    users = get_all_users().order_by(F('likes_amount').asc())
    paged_users = get_paginated(request, users)
    return render(request, 'user-list/user-list-sort-by-rating-asc.html',
                  {'users': users,
                   'paged_users': paged_users,
                   })


def sort_user_list_by_rating_desc(request):
    """
    Функция-представление для отображения списка всех зарегистрированных пользователей
    с сортировкой по рейтингу, т.е. по суммарному количеству лайков на всех рецептах пользователя (по убыванию).
    Функция принимает один параметр: запрос.
    Функция получает из базы данных набор всех зарегистрированных пользователей, сортирует его
    по рейтингу (по убыванию) и добавляет к набору пользователей пагинацию.
    Функция возвращает веб-страницу с шаблоном user-list-sort-by-rating-desc.html
    и контекстом,содержащим два набора пользователей:
    - отсортированный набор пользователей без пагинации (users), который нужен для отображения
    общего количества пользователей;
    - отсортированный набор пользователей с пагинацией (paged_users), который отображается на веб-странице;
    """
    users = get_all_users().order_by(F('likes_amount').desc())
    paged_users = get_paginated(request, users)
    return render(request, 'user-list/user-list-sort-by-rating-desc.html',
                  {'users': users,
                   'paged_users': paged_users,
                   })
