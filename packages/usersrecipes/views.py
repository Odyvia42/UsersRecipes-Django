from django.shortcuts import render
from recipeblog.utils import *


def show_user_recipes_all(request, pk):
    """
    Функция-представление для отображения списка всех рецептов за авторством любого пользователя сайта,
    отличного от текущего пользователя.
    Функция принимает два параметра:
    :param request - запрос, из которого берётся информация о текущем пользователе;
    :param pk - идентификатор пользователя, чьи рецепты надо отобразить.
    Функция получает из базы данных пользователя по переданному идентификатору, набор рецептов за авторством этого
    пользователя, для каждого рецепта актуализирует состояние лайка/избранного (лайкнут ли пост/добавлен
    ли в избранное текущим пользователем), а также добавляет к набору рецептов пагинацию.
    Функция возвращает веб-страницу с шаблоном user_recipes_all.html и контекстом, содержащим два набора рецептов:
    - набор рецептов с пагинацией (paged_recipes), который отображается на веб-странице;
    - набор со всеми рецептами без пагинации (user_recipes), который нужен для отображения
    общего количества рецептов;
    а также словарь 'user' с информацией о запрошенном пользователе
    (для отображения никнейма запрошенного пользователя).
    """
    user = get_user_by_id(pk)
    user_recipes = get_all_users_recipes(pk)
    check_likes_faves(request, user_recipes)
    paged_recipes = get_paginated(request, user_recipes)
    return render(request, 'user-recipes/user_recipes_all.html',
                  {'paged_recipes': paged_recipes,
                   'user_recipes': user_recipes,
                   'user': user})


def show_user_recipes_salads(request, pk):
    """
    Функция-представление для отображения списка всех рецептов в категории "салаты" за авторством
    любого пользователя сайта, отличного от текущего пользователя.
    Функция принимает два параметра:
    :param request - запрос, из которого берётся информация о текущем пользователе;
    :param pk - идентификатор пользователя, чьи рецепты надо отобразить.
    Функция получает из базы данных пользователя по переданному идентификатору, набор рецептов в категории
    "салаты" за авторством этого пользователя, для каждого рецепта актуализирует состояние лайка/избранного
    (лайкнут ли пост/добавлен ли в избранное текущим пользователем), а также добавляет к набору рецептов пагинацию.
    Функция возвращает веб-страницу с шаблоном user_recipes_salads.html и контекстом, содержащим два набора рецептов:
    - набор рецептов с пагинацией (paged_recipes), который отображается на веб-странице;
    - набор со всеми рецептами без пагинации (user_recipes), который нужен для отображения
    общего количества рецептов;
    а также словарь 'user' с информацией о запрошенном пользователе
    (для отображения никнейма запрошенного пользователя).
    """
    user = get_user_by_id(pk)
    user_recipes = get_salads(get_all_users_recipes(pk))
    check_likes_faves(request, user_recipes)
    paged_recipes = get_paginated(request, user_recipes)
    return render(request, 'user-recipes/user_recipes_salads.html',
                  {'paged_recipes': paged_recipes,
                   'user_recipes': user_recipes,
                   'user': user})


def show_user_recipes_first_course(request, pk):
    """
    Функция-представление для отображения списка всех рецептов в категории "первое блюдо" за авторством
    любого пользователя сайта, отличного от текущего пользователя.
    Функция принимает два параметра:
    :param request - запрос, из которого берётся информация о текущем пользователе;
    :param pk - идентификатор пользователя, чьи рецепты надо отобразить.
    Функция получает из базы данных пользователя по переданному идентификатору, набор рецептов в категории
    "первое блюдо" за авторством этого пользователя, для каждого рецепта актуализирует состояние лайка/избранного
    (лайкнут ли пост/добавлен ли в избранное текущим пользователем), а также добавляет к набору рецептов пагинацию.
    Функция возвращает веб-страницу с шаблоном user_recipes_first_course.html и контекстом,
    содержащим два набора рецептов:
    - набор рецептов с пагинацией (paged_recipes), который отображается на веб-странице;
    - набор со всеми рецептами без пагинации (user_recipes), который нужен для отображения
    общего количества рецептов;
    а также словарь 'user' с информацией о запрошенном пользователе
    (для отображения никнейма запрошенного пользователя).
    """
    user = get_user_by_id(pk)
    user_recipes = get_first_courses(get_all_users_recipes(pk))
    check_likes_faves(request, user_recipes)
    paged_recipes = get_paginated(request, user_recipes)
    return render(request, 'user-recipes/user_recipes_first_course.html',
                  {'paged_recipes': paged_recipes,
                   'user_recipes': user_recipes,
                   'user': user})


def show_user_recipes_main_course(request, pk):
    """
    Функция-представление для отображения списка всех рецептов в категории "второе блюдо" за авторством
    любого пользователя сайта, отличного от текущего пользователя.
    Функция принимает два параметра:
    :param request - запрос, из которого берётся информация о текущем пользователе;
    :param pk - идентификатор пользователя, чьи рецепты надо отобразить.
    Функция получает из базы данных пользователя по переданному идентификатору, набор рецептов в категории
    "второе блюдо" за авторством этого пользователя, для каждого рецепта актуализирует состояние лайка/избранного
    (лайкнут ли пост/добавлен ли в избранное текущим пользователем), а также добавляет к набору рецептов пагинацию.
    Функция возвращает веб-страницу с шаблоном user_recipes_main_course.html и контекстом,
    содержащим два набора рецептов:
    - набор рецептов с пагинацией (paged_recipes), который отображается на веб-странице;
    - набор со всеми рецептами без пагинации (user_recipes), который нужен для отображения
    общего количества рецептов;
    а также словарь 'user' с информацией о запрошенном пользователе
    (для отображения никнейма запрошенного пользователя).
    """
    user = get_user_by_id(pk)
    user_recipes = get_main_courses(get_all_users_recipes(pk))
    check_likes_faves(request, user_recipes)
    paged_recipes = get_paginated(request, user_recipes)
    return render(request, 'user-recipes/user_recipes_main_course.html',
                  {'paged_recipes': paged_recipes,
                   'user_recipes': user_recipes,
                   'user': user})


def show_user_recipes_dessert(request, pk):
    """
    Функция-представление для отображения списка всех рецептов в категории "десерты" за авторством
    любого пользователя сайта, отличного от текущего пользователя.
    Функция принимает два параметра:
    :param request - запрос, из которого берётся информация о текущем пользователе;
    :param pk - идентификатор пользователя, чьи рецепты надо отобразить.
    Функция получает из базы данных пользователя по переданному идентификатору, набор рецептов в категории
    "десерты" за авторством этого пользователя, для каждого рецепта актуализирует состояние лайка/избранного
    (лайкнут ли пост/добавлен ли в избранное текущим пользователем), а также добавляет к набору рецептов пагинацию.
    Функция возвращает веб-страницу с шаблоном user_recipes_dessert.html и контекстом, содержащим два набора рецептов:
    - набор рецептов с пагинацией (paged_recipes), который отображается на веб-странице;
    - набор со всеми рецептами без пагинации (user_recipes), который нужен для отображения
    общего количества рецептов;
    а также словарь 'user' с информацией о запрошенном пользователе
    (для отображения никнейма запрошенного пользователя).
    """
    user = get_user_by_id(pk)
    user_recipes = get_desserts(get_all_users_recipes(pk))
    check_likes_faves(request, user_recipes)
    paged_recipes = get_paginated(request, user_recipes)
    return render(request, 'user-recipes/user_recipes_dessert.html',
                  {'paged_recipes': paged_recipes,
                   'user_recipes': user_recipes,
                   'user': user})


def show_user_recipes_bakery(request, pk):
    """
    Функция-представление для отображения списка всех рецептов в категории "выпечка" за авторством
    любого пользователя сайта, отличного от текущего пользователя.
    Функция принимает два параметра:
    :param request - запрос, из которого берётся информация о текущем пользователе;
    :param pk - идентификатор пользователя, чьи рецепты надо отобразить.
    Функция получает из базы данных пользователя по переданному идентификатору, набор рецептов в категории
    "выпечка" за авторством этого пользователя, для каждого рецепта актуализирует состояние лайка/избранного
    (лайкнут ли пост/добавлен ли в избранное текущим пользователем), а также добавляет к набору рецептов пагинацию.
    Функция возвращает веб-страницу с шаблоном user_recipes_bakery.html и контекстом, содержащим два набора рецептов:
    - набор рецептов с пагинацией (paged_recipes), который отображается на веб-странице;
    - набор со всеми рецептами без пагинации (user_recipes), который нужен для отображения
    общего количества рецептов;
    а также словарь 'user' с информацией о запрошенном пользователе
    (для отображения никнейма запрошенного пользователя).
    """
    user = get_user_by_id(pk)
    user_recipes = get_bakery(get_all_users_recipes(pk))
    check_likes_faves(request, user_recipes)
    paged_recipes = get_paginated(request, user_recipes)
    return render(request, 'user-recipes/user_recipes_bakery.html',
                  {'paged_recipes': paged_recipes,
                   'user_recipes': user_recipes,
                   'user': user})


def show_user_recipes_beverages(request, pk):
    """
    Функция-представление для отображения списка всех рецептов в категории "напитки" за авторством
    любого пользователя сайта, отличного от текущего пользователя.
    Функция принимает два параметра:
    :param request - запрос, из которого берётся информация о текущем пользователе;
    :param pk - идентификатор пользователя, чьи рецепты надо отобразить.
    Функция получает из базы данных пользователя по переданному идентификатору, набор рецептов в категории
    "напитки" за авторством этого пользователя, для каждого рецепта актуализирует состояние лайка/избранного
    (лайкнут ли пост/добавлен ли в избранное текущим пользователем), а также добавляет к набору рецептов пагинацию.
    Функция возвращает веб-страницу с шаблоном user_recipes_beverages.html и контекстом, содержащим два набора рецептов:
    - набор рецептов с пагинацией (paged_recipes), который отображается на веб-странице;
    - набор со всеми рецептами без пагинации (user_recipes), который нужен для отображения
    общего количества рецептов;
    а также словарь 'user' с информацией о запрошенном пользователе
    (для отображения никнейма запрошенного пользователя).
    """
    user = get_user_by_id(pk)
    user_recipes = get_beverages(get_all_users_recipes(pk))
    check_likes_faves(request, user_recipes)
    paged_recipes = get_paginated(request, user_recipes)
    return render(request, 'user-recipes/user_recipes_beverages.html',
                  {'paged_recipes': paged_recipes,
                   'user_recipes': user_recipes,
                   'user': user})
