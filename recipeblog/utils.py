from django.core.paginator import Paginator
from django.db.models import Count, F
from recipeblog.models import Recipe, User


def get_all_my_favs(request):
    """
    Функция выбирает все рецепты, добавленные в избранное текущим пользователем.
    Функция принимает один параметр:
    :param request: запрос, из которого берётся информация о текущем пользователе.
    Функция возвращает:
    :return: набор рецептов, которые были добавлены в избранное текущим пользователем.
    """
    return request.user.recipe_favs.all()


def get_paginated(request, queryset):
    """
    Функция, добавляющая пагинацию в выбранный набор рецептов.
    Функция принимает два параметра:
    :param request: запрос, из которого берутся сведения о текущей странице;
    :param queryset: набор рецептов, в который надо добавить пагинацию.
    Функция возвращает:
    :return: переданный набор рецептов с добавленной пагинацией, где на каждой странице 5 рецептов.
    """
    p = Paginator(queryset, 5)
    page = request.GET.get('page')
    return p.get_page(page)


def check_likes_faves(request, queryset):
    """
    Функция, актуализирующая для каждого рецепта состояние лайков/избранного
    (лайкнут ли/добавлен ли в избранное текущим пользователем).
    Функция принимает два параметра:
    :param request: запрос, из которого берётся id текущего пользователя;
    :param queryset: набор рецептов, для которого нужно проверить состояние лайков/избранного.
    Если пользователь ещё не лайкнул текущий рецепт, параметр is_liked рецепта устанавливается на False,
    в противном случае - True.
    Если пользователь ещё не добавил в избранное текущий рецепт, параметр is_faved рецепта устанавливается на False,
    в противном случае - True.
    Функция возвращает:
    :return: переданный функции набор рецептов, в котором для каждого рецепта актуализированы
    значения is_liked и is_faved.
    """
    for recipe in queryset:
        if recipe.likes.filter(id=request.user.id).exists():
            recipe.is_liked = True
        else:
            recipe.is_liked = False
        if recipe.favs.filter(id=request.user.id).exists():
            recipe.is_faved = True
        else:
            recipe.is_faved = False
    return queryset


def get_liked_recipes(request):
    """
    Функция, возвращающая все лайкнутые текущим пользователем рецепты.
    Функция принимает один параметр:
    :param request: запрос, из которого берётся информация о текущем пользователе.
    Функция возвращает:
    :return: набор рецептов, которые были лайкнуты текущим пользователем.
    """
    return request.user.recipe_likes.all()


def get_all_my_recipes(request):
    """
    Функция, возвращающая все рецепты, опубликованные текущим пользователем.
    Функция принимает один параметр:
    :param request: запрос, из которого берётся информация о текущем пользователе.
    Функция возвращает:
    :return: набор рецептов, автором которых является текущий пользователь.
    """
    return Recipe.objects.filter(author=request.user)


def order_by_pub_date_desc(queryset):
    """
    Функция, сортирующая набор рецептов по дате публикации (по убыванию).
    Функция принимает один параметр:
    :param queryset: набор рецептов, который нужно отсортировать.
    Функция возвращает:
    :return: отсортированный набор рецептов.
    """
    return queryset.order_by(F('publication_date').desc())


def order_by_pub_date_asc(queryset):
    """
    Функция, сортирующая набор рецептов по дате публикации (по возрастанию).
    Функция принимает один параметр:
    :param queryset: набор рецептов, который нужно отсортировать.
    Функция возвращает:
    :return: отсортированный набор рецептов.
    """
    return queryset.order_by(F('publication_date').asc())


def order_by_title_desc(queryset):
    """
    Функция, сортирующая набор рецептов по заголовку в обратном алфавитном порядке.
    Функция принимает один параметр:
    :param queryset: набор рецептов, который нужно отсортировать.
    Функция возвращает:
    :return: отсортированный набор рецептов.
    """
    return queryset.order_by(F('title').desc())


def order_by_title_asc(queryset):
    """
    Функция, сортирующая набор рецептов по заголовку в прямом алфавитном порядке.
    Функция принимает один параметр:
    :param queryset: набор рецептов, который нужно отсортировать.
    Функция возвращает:
    :return: отсортированный набор рецептов.
    """
    return queryset.order_by(F('title').asc())


def order_by_likes_amount_desc(queryset):
    """
    Функция, сортирующая набор рецептов по количеству лайков (по убыванию).
    Функция принимает один параметр:
    :param queryset: набор рецептов, который нужно отсортировать.
    Функция возвращает:
    :return: отсортированный набор рецептов.
    """
    return queryset.annotate(likes_amount=Count('likes')).order_by(F('likes_amount').desc())


def order_by_likes_amount_asc(queryset):
    """
    Функция, сортирующая набор рецептов по количеству лайков (по возрастанию).
    Функция принимает один параметр:
    :param queryset: набор рецептов, который нужно отсортировать.
    Функция возвращает:
    :return: отсортированный набор рецептов.
    """
    return queryset.annotate(likes_amount=Count('likes')).order_by(F('likes_amount').asc())


def get_salads(queryset):
    """
    Функция, выбирающая из переданного набора рецептов только рецепты в категории "салаты".
    Функция принимает один параметр:
    :param queryset: набор рецептов.
    Функция возвращает:
    :return: все рецепты в категории "салаты" из переданного набора рецептов.
    """
    return queryset.filter(dish_type='SL')


def get_first_courses(queryset):
    """
    Функция, выбирающая из переданного набора рецептов только рецепты в категории "первое блюдо".
    Функция принимает один параметр:
    :param queryset: набор рецептов.
    Функция возвращает:
    :return: все рецепты в категории "первое блюдо" из переданного набора рецептов.
    """
    return queryset.filter(dish_type='FC')


def get_main_courses(queryset):
    """
    Функция, выбирающая из переданного набора рецептов только рецепты в категории "второе блюдо".
    Функция принимает один параметр:
    :param queryset: набор рецептов.
    Функция возвращает:
    :return: все рецепты в категории "второе блюдо" из переданного набора рецептов.
    """
    return queryset.filter(dish_type='MC')


def get_bakery(queryset):
    """
    Функция, выбирающая из переданного набора рецептов только рецепты в категории "выпечка".
    Функция принимает один параметр:
    :param queryset: набор рецептов.
    Функция возвращает:
    :return: все рецепты в категории "выпечка" из переданного набора рецептов.
    """
    return queryset.filter(dish_type='BK')


def get_desserts(queryset):
    """
    Функция, выбирающая из переданного набора рецептов только рецепты в категории "десерты".
    Функция принимает один параметр:
    :param queryset: набор рецептов.
    Функция возвращает:
    :return: все рецепты в категории "десерты" из переданного набора рецептов.
    """
    return queryset.filter(dish_type='DS')


def get_beverages(queryset):
    """
    Функция, выбирающая из переданного набора рецептов только рецепты в категории "напитки".
    Функция принимает один параметр:
    :param queryset: набор рецептов.
    Функция возвращает:
    :return: все рецепты в категории "напитки" из переданного набора рецептов.
    """
    return queryset.filter(dish_type='BV')


def get_all_users():
    """
    Функция для выбора всех пользователей и их аннотирования по количеству рецептов и лайков.
    Функция не принимает параметры.
    Функция возвращает:
    :return: набор всех пользователей, в котором каждый пользователь аннотирован количеством лайков и
    рецептов, в которых он является автором.
    """
    return User.objects.annotate(num_recipes=Count('recipe', distinct=True)).annotate(
        likes_amount=Count('recipe__likes'))


def get_user_by_id(pk):
    """
    Функция, возвращающая конкретного пользователя по идентификатору (id).
    Функция принимает один параметр:
    :param pk: id пользователя.
    Функция возвращает:
    :return: пользователь с переданным id.
    """
    return User.objects.get(id=pk)


def get_all_users_favs(pk):
    """
    Функция, выбирающая все рецепты, добавленные в избранное любым пользователем, отличным от текущего.
    Функция принимает один параметр:
    :param pk: идентификатор (id) пользователя.
    Функция возвращает:
    :return: набор рецептов, добавленных в избранное пользователем, чей id был передан в параметре функции.
    """
    return get_user_by_id(pk).recipe_favs.all()


def get_all_users_recipes(pk):
    """
    Функция выбирает все рецепты, автором которых является конкретный пользователь, отличный от текущего.
    Функция принимает один параметр:
    :param pk: идентификатор (id) пользователя.
    Функция возвращает:
    :return: набор рецептов, автором которых является пользователь, чей id был передан в параметре функции.
    """
    return Recipe.objects.filter(author=get_user_by_id(pk))
